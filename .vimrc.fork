" Helpers {
    function PreviewRst2Html()
        let outfile=tempname()
        let time_outfile=tempname()
        silent execute "!{ time ( rst2html5 " . expand("%:r") . ".{rst,html} && open " . expand("%:r") . ".html && cat " . expand("%:r") . ".html ) &> '" . outfile . "'; } 2> '" . time_outfile . "'"
        execute "!clear; cat '" . outfile . "'; echo -e '\\n\\n'; cat '" . time_outfile . "'"
        call delete(outfile)
        call delete(time_outfile)
    endfunction

    function RunWith(command)
        let outfile=tempname()
        let time_outfile=tempname()
        silent execute "!{ time " . a:command . " " . expand("%") . " &> '" . outfile . "'; } 2> '" . time_outfile . "'"
        execute "!clear; cat '" . outfile . "'; echo -e '\\n\\n'; cat '" . time_outfile . "'"
        call delete(outfile)
        call delete(time_outfile)
    endfunction

    function SignsToggle()
        if !has("signs") || empty(bufname(''))
            return
        endif
        if !exists("s:signfile")
            let s:signfile = tempname().'_'
        endif
        redir =>a|exe "sil sign place buffer=".bufnr('')|redir end
        let signs = split(a, "\n")[1:]
        if !empty(signs)
            let bufnr = bufnr('')
            exe ":sil SaveSigns!" s:signfile.bufnr('')
            if bufnr('') != bufnr
                exe "noa wq"
            endif
            sign unplace *
        elseif filereadable(s:signfile.bufnr(''))
            exe "so" s:signfile.bufnr('')
            call delete(s:signfile.bufnr(''))
        endif
    endfunction
" }

" Environment {
    set shell=$SHELL
    set term=xterm-256color
" }

" General {
    set nohidden

    " restore per-file state on re-open
    set viewoptions=cursor,folds,slash,unix
    set viminfo='10,\"100,:20,%,n~/.viminfo

    set sessionoptions=curdir,folds,help,localoptions,tabpages,winsize
" }

" File types {
    autocmd BufRead,BufNewFile *.il set filetype=ocean
    autocmd BufRead,BufNewFile *.ocn set filetype=ocean
" }

" Vim UI {
    let g:local_ctermbg_altcolor=((&background == "dark")? "black" : "lightgrey")
    let g:local_guibg_altcolor=((&background == "dark")? "#073642" : "#eee8d5")

    execute 'highlight ColorColumn ctermbg=' . g:local_ctermbg_altcolor . ' guibg=' . g:local_guibg_altcolor
    execute 'highlight CursorLine ctermbg=' . g:local_ctermbg_altcolor . ' guibg=' . g:local_guibg_altcolor
    execute 'highlight CursorColumn ctermbg=' . g:local_ctermbg_altcolor . ' guibg=' . g:local_guibg_altcolor

    set cursorcolumn

    autocmd FileType python,rst,sh setlocal commentstring=#%s

    autocmd FileType python,rst,sh setlocal complete+=t
" }

" Formatting {
    set wrap

    autocmd FileType gitcommit,rst setlocal textwidth=72
    autocmd FileType coffee,conf,haml,html,jade,javascript,json,python,ruby,sh,sls
      \ setlocal textwidth=94
    set colorcolumn=+1

    autocmd FileType coffee,eruby,gitcommit,html,javascript,json,rst
      \ setlocal expandtab shiftwidth=2 softtabstop=2

    " NOTE: StripTrailingWhitespace is defined in ~/.vimrc
    autocmd FileType coffee,css,eruby,haml,html,jade,javascript,rst,ruby
      \ autocmd BufWritePre <buffer>
          \ if !exists('g:spf13_keep_trailing_whitespace')
          \ | call StripTrailingWhitespace()
          \ | endif

    " do not auto-wrap according to ``textwidth`` within these file types
    autocmd FileType coffee,conf,haml,html,jade,javascript,python,rst,ruby,sh,sls
      \ setlocal formatoptions-=t

    set tildeop
" }

" Key (Re)Mappings {
    nnoremap gj j
    nnoremap gk k
    nnoremap H gT
    nnoremap L gt
    nnoremap <leader>s :%s/\<<C-r><C-w>\>/

    imap OA <C-o>k
    imap OB <C-o>j
    imap OC <C-o>l
    imap OD <C-o>h

    nmap <leader><C-x> :set number! relativenumber! \| call SignsToggle()<CR>

    autocmd FileType python nmap <leader>R :call RunWith("python")<CR>
    autocmd FileType rst nmap <leader>R :call PreviewRst2Html()<CR>
    autocmd FileType ruby nmap <leader>R :call RunWith("ruby")<CR>
" }

" Plugins {
    " AutoClose {
        let g:autoclose_on=0
        let g:autoclose_vim_commentmode=1
    " }

    " camelcasemotion {
        map ;w <Plug>CamelCaseMotion_w
        map ;b <Plug>CamelCaseMotion_b
        map ;e <Plug>CamelCaseMotion_e
    " }

    " Fugitive {
        nunmap <leader>gs
        nunmap <leader>gd
        nunmap <leader>gc
        nunmap <leader>gb
        nunmap <leader>gl
        nunmap <leader>gp
        nnoremap <silent> <leader>Gs :Gstatus<CR>
        nnoremap <silent> <leader>Gd :Gdiff<CR>
        nnoremap <silent> <leader>Gc :Gcommit<CR>
        nnoremap <silent> <leader>Gb :Gblame<CR>
        nnoremap <silent> <leader>Gl :Glog<CR>
        nnoremap <silent> <leader>Gp :Git push<CR>
    "}

    " indent_guides {
        let g:indent_guides_auto_colors=0
        autocmd VimEnter,Colorscheme * :execute ':highlight IndentGuidesEven ctermbg=' . g:local_ctermbg_altcolor . ' guibg=' . g:local_guibg_altcolor
        autocmd VimEnter,Colorscheme * :execute ':highlight IndentGuidesOdd ctermbg=' . g:local_ctermbg_altcolor . ' guibg=' . g:local_guibg_altcolor
    " }

    " jedi-vim {
        let g:jedi#popup_select_first = 0
    "}

    " neocomplete {
        let g:neocomplete#disable_auto_complete = 1
        inoremap <expr><C-n> neocomplete#start_manual_complete()
        inoremap <expr><C-y> neocomplete#close_popup()
    " }

    " NERDtree {
        unmap <C-e>
        unmap <Leader>e
        nunmap <Leader>nt
    " }

    " nerdtree-tabs {
        map <Leader>F <Plug>NERDTreeMirrorToggle<CR>
    " }

    " Preview {
        let g:PreviewBrowsers="google-chrome,chromium-browser,firefox,opera,epiphany,safari"
    " }

    " Promptline {
        let g:promptline_preset=
              \ {'a': [promptline#slices#host(), promptline#slices#user()],
              \  'b': [promptline#slices#python_virtualenv()],
              \  'c': [promptline#slices#cwd()],
              \  'x': [promptline#slices#jobs()],
              \  'y': [promptline#slices#git_status()],
              \  'z': [promptline#slices#vcs_branch()],
              \  'warn': [promptline#slices#last_exit_code(),
              \           promptline#slices#battery()],
              \  'options': {'left_sections': ['a', 'b', 'c'],
              \              'right_sections': ['warn', 'x', 'y', 'z'],
              \              'left_only_sections': ['a', 'b', 'c', 'z', 'y', 'x', 'warn']}
              \  }
        let g:promptline_theme='airline_insert'
    " }

    " PyMode {
        let g:pymode_options = 0

        let g:pymode_rope = 1
        let g:pymode_rope_goto_definition_cmd = 'new'
        " NOTE: disabled in favor of neocomplete/deoplete
        let g:pymode_rope_completion = 0
        let g:pymode_rope_complete_on_dot = 0
        let g:pymode_rope_extended_complete = 1

        " NOTE: disabled in favor of Syntastic
        let g:pymode_lint = 0
        let g:pymode_lint_on_write = 1
        let g:pymode_lint_on_fly = 0
        let g:pymode_lint_cwindow = 1
        let g:pymode_quickfix_minheight = 3
        let g:pymode_quickfix_maxheight = 6
        let g:pymode_lint_signs = 1

        let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'pep257', 'mccabe']

        " pep8 rejects continuation lines unless indented by multiples of 4
        let g:pymode_lint_ignore = 'E121'
        " pep8 rejects some reasonable forms of visual indentation
        let g:pymode_lint_ignore .= ',E127'
        " pep8 rejects some reasonable forms of visual indentation
        let g:pymode_lint_ignore .= ',E128'
        " pep8 rejects whitespace before a call's left parenthesis even if it
        " follows a line continuation
        let g:pymode_lint_ignore .= ',E211'
        " pyflakes rejects 'from ... import *' even in init modules that are
        " including some of their children
        let g:pymode_lint_ignore .= ',W404'
    " }

    " ri {
        nnoremap  <leader>ri :call ri#OpenSearchPrompt(0)<CR>
        nnoremap  <leader>rI :call ri#OpenSearchPrompt(1)<CR>
        nnoremap  <leader>rK :call ri#LookupNameUnderCursor()<CR>
    " }

    " sessionman {
        nunmap <leader>sc
        nunmap <leader>sl
        nunmap <leader>ss

        nmap <leader>SL :SessionList<CR>
        nmap <leader>SS :SessionSave<CR>
    " }

    " Sneak {
        let g:sneak#streak = 1
        nmap f <Plug>Sneak_f
        nmap F <Plug>Sneak_F
        xmap f <Plug>Sneak_f
        xmap F <Plug>Sneak_F
        omap f <Plug>Sneak_f
        omap F <Plug>Sneak_F
        nmap t <Plug>Sneak_t
        nmap T <Plug>Sneak_T
        xmap t <Plug>Sneak_t
        xmap T <Plug>Sneak_T
        omap t <Plug>Sneak_t
        omap T <Plug>Sneak_T
    " }

    " Surround {
        let b:surround_indent=1
    " }

    " Syntastic {
        let g:syntastic_aggregate_errors = 1
        let g:syntastic_check_on_open = 1
        let g:syntastic_check_on_wq = 0
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_loc_list_height = 6

        let g:syntastic_shell = '/usr/bin/zsh'
        let g:syntastic_python_python_exec = '/usr/bin/python3'
        let g:syntastic_python_checkers = ['pylama']

        " rationale:
        "
        "   E127
        "     pep8 rejects some reasonable forms of visual indentation
        "
        "   E211
        "     pep8 rejects whitespace before a call's left parenthesis even if
        "     it follows a line continuation.  placing it there helps to
        "     identify the arguments
        "
        "   W404
        "     pyflakes rejects 'from ... import *' even in init modules that
        "     are including some of their children.  extracting code to
        "     private modules and including them in their parents helps to
        "     organize the code
        let g:syntastic_quiet_messages = {
            \ 'regex': '\vE127|E211|W404'
            \ }
    " }

    " Tabmerge {
        " TODO: mappings
    " }

    " TagBar {
        let g:tagbar_autoclose=1
        let g:tagbar_autopreview=1
        let g:tagbar_previewwin_pos="botright"
        let g:tagbar_left=1
        let g:tagbar_width=31
        let g:tagbar_zoomwidth=0

        nunmap <leader>tt
        nnoremap <silent> <leader>T :TagbarToggle<CR>
    " }

    " vim-test {
        let test#strategy = 'neovim'
        "nmap <silent> <leader>t :TestNearest<CR>
        "nmap <silent> <leader>T :TestFile<CR>
        "nmap <silent> <leader>a :TestSuite<CR>
        "nmap <silent> <leader>l :TestLast<CR>
        "nmap <silent> <leader>g :TestVisit<CR>
    " }

    " yankstack {
        let g:yankstack_map_keys=0
        nmap <leader>p <Plug>yankstack_substitute_older_paste
        nmap <leader>P <Plug>yankstack_substitute_newer_paste
    " }
" }
